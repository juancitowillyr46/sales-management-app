<?php


namespace Test\Core\Products\Application\UseCase;


use App\Core\Products\Application\Request\ProductRequest;
use App\Core\Products\Application\UseCase\IProductManagerUseCase;
use App\Core\Products\Application\UseCase\ProductManagerUseCase;
use App\Core\Products\Domain\Repository\IProductManagerRepository;
use App\Core\Products\Domain\Service\IProductManagerService;
use App\Core\Products\Domain\Service\ProductManagerService;
use App\Core\Products\Infrastructure\Persistence\Repository\Eloquent\ProductManagerRepository;
use DI\Container;
use DI\ContainerBuilder;
use DI\DependencyException;
use DI\NotFoundException;
use Exception;
use PHPUnit\Framework\TestCase;
use stdClass;

class ProductManagerUseCaseTest extends TestCase
{
    private IProductManagerUseCase $productManagerUseCase;
    private Container $container;

    public function setUp(): void
    {
        $containerBuilder = new ContainerBuilder;
        $containerBuilder->addDefinitions([
            IProductManagerRepository::class => \DI\autowire(ProductManagerRepository::class),
            IProductManagerService::class => \DI\autowire(ProductManagerService::class),
            IProductManagerUseCase::class => \DI\autowire(ProductManagerUseCase::class),
        ]);
        try {
            $this->container = $containerBuilder->build();
        } catch (Exception $e) {
        }

        try {
            $this->productManagerUseCase = $this->container->get(ProductManagerUseCase::class);
        } catch (DependencyException $e) {
        } catch (NotFoundException $e) {
        }

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateProduct() {

        $create = new stdClass();
        $create->uuid = "";
        $create->image = "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcR9oH77LHc8Sa5RWLvjz_6c7_UJrd7zk3_QmnloQnOdbakUYcJp";
        $create->name = "Tornillos";
        $create->price = 150.0;
        $create->description = "";
        $create->category = 1;
        $create->skuCode = "00000000";
        $create->unitOfMeasurement = 1;
        $create->featured = true;
        $create->cost = 1500.1;
        $create->promotionPrice = false;

        $requestBody = new ProductRequest($create);

        $success = $this->productManagerUseCase->saveProduct($requestBody);
        $this->assertEquals(true, true, 'The product was created successfully');
    }

    public function testUpdateProduct() {
        $update = new stdClass();
        $update->uuid = "c7b659f7-9032-4f14-a19a-54c4a75cb66f";
        $update->image = "http://image.pnmg";
        $update->name = "Tornillos editado";
        $update->price = 3.50;
        $update->description = "Lorem ipsum";
        $update->category = 1;
        $update->skuCode = "00000000";
        $update->unitOfMeasurement = 1;
        $update->featured = true;
        $update->cost = 150.1;
        $update->promotionPrice = false;

        $requestBody = new ProductRequest($update);

        $success = $this->productManagerUseCase->editProductByCode($update->uuid, $requestBody);
        $this->assertEquals(true, true, 'The product was created successfully');
    }

    public function testGetProduct() {
        $get = new stdClass();
        $get->uuid = 'c7b659f7-9032-4f14-a19a-54c4a75cb66f';
        print_r($this->productManagerUseCase->getProductByCode($get->uuid));
        $this->assertEquals(true, true, 'The product was created successfully');
    }

    public function testListProduct() {
        $get = new stdClass();
        $get->page = 1;
        print_r($this->productManagerUseCase->getProducts((array) $get));
        $this->assertEquals(true, true, 'The product was created successfully');
    }

    public function testDeleteProduct() {
        $get = new stdClass();
        $get->uuid = 'c7b659f7-9032-4f14-a19a-54c4a75cb66f';
        $success = $this->productManagerUseCase->removeProductByCode($get->uuid);
        $this->assertEquals(true, $success, 'The product was created successfully');
    }

}