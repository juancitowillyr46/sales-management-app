<?php


namespace Test\Core\Products\Domain\Service;


use App\Core\Products\Application\Request\ProductRequest;
use App\Core\Products\Domain\Repository\IProductManagerRepository;
use App\Core\Products\Domain\Service\IProductManagerService;
use App\Core\Products\Domain\Service\ProductManagerService;
use App\Core\Products\Infrastructure\Persistence\Repository\Eloquent\ProductManagerRepository;
use DI\Container;
use DI\ContainerBuilder;
use Exception;
use PHPUnit\Framework\TestCase;
use stdClass;

class ProductManagerServiceLogicTest extends TestCase
{
    private IProductManagerService $productManagerService;
    private Container $container;

    public function setUp(): void
    {
        $containerBuilder = new ContainerBuilder;
        $containerBuilder->addDefinitions([
            IProductManagerRepository::class => \DI\autowire(ProductManagerRepository::class),
            IProductManagerService::class => \DI\autowire(ProductManagerService::class),
        ]);
        try {
            $this->container = $containerBuilder->build();
        } catch (Exception $e) {
        }

        $this->productManagerService = $this->container->get(IProductManagerService::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateProduct() {

//        $d = new stdClass();
//        $d->uuid = "132312312312";
//        $d->image = "imagen.png";
//        $d->name = "Tornillos";
//        $d->price = 1500;
//        $d->description = "";
//        $d->category = 1;
//        $d->skuCode = "12123123";
//        $d->unitOfMeasurement = 1;
//        $d->featured = true;
//        $d->cost = 1500;
//        $d->promotionPrice = false;
//        $requestBody = new ProductRequest($d);
//        $success = $this->productManagerServiceLogic->saveProduct($requestBody);
        $this->assertEquals(true, true, 'The product was created successfully');
    }
}